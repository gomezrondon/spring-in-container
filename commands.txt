./gradlew jibDockerBuild
docker run -p 8080:8080 spring-in-container:unspecified -d
docker ps
docker stop <CONTAINER ID>

#stop all containers with name k8s
docker ps -a | grep "spring-container" | awk '{print $1}' | xargs docker stop
#remove all containers with name k8s
docker ps -a | grep "spring-container" | awk '{print $1}' | xargs docker rm

// borrar images y forzar
docker images | grep "spring-container" | awk '{print $3}' | xargs docker rmi -f

how to test
http://192.168.99.100:8080/time

kubectl get deployment  // get info of deployment

kubectl delete deployment <deploy name>
** stop a deployment **
kubectl delete deployment spring-in-container-service

---------- JIB
#generate the image locally
gradle jibDockerBuild


------------ using Kompose (solo conversion 1, 2 o 3 NO 2.1)
kompose convert --file docker-compose.yml -o k8s
## cleaning yaml file script
jbang --cp=./script script/jscript.java ./k8s

--------------
1) create the image
gradle clean bootBuildImage
2) create the skaffold config file
skaffold version
3) deployamos
skaffold deploy
4) chequeamos el deployment
kubectl get deployment
5) revisamos el log del pod
5.1) get the full name of the pod
kubectl get pod
5.2) revisamos el log del pod
kubectl logs -f spring-in-container-service-74c466b554-jmq4n
6) stopping the deployment
skaffold delete  //destroy all service

----- skaffold dev
skaffold deploy try to push to production
skaffold dev // it deploys ant read log


------------- kubernetes in GCP
gcloud container clusters get-credentials <CLUSTER-NAME> --zone <ZONE>
kubectl get pods

kubectl logs <POD-FULL-NAME>
kubectl logs -f <POD-FULL-NAME>  // continue streaming

kubectl get pod -w   // watch the pods
kubectl get services
kubectl delete services gateway-service
kubectl get deployment
kubectl delete deployment spring-container
kubectl logs -f spring-container-686df76b46-s7jtv